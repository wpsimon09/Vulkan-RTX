//
// Created by wpsimon09 on 27/09/24.
//

#include "VGeneralUtils.hpp"
#include "Application/Logger/Logger.hpp"
#include "Application/VertexArray/VertexArray.hpp"


uint32_t VulkanUtils::FindQueueFamily(const std::vector<vk::QueueFamilyProperties> &queueFamilyProperties,
                                      vk::QueueFlagBits queueType) {
    //select just the queue fmily index that supports graphics operations
    std::vector<vk::QueueFamilyProperties>::const_iterator graphicsQueueFamilyProperty = std::find_if(
        queueFamilyProperties.begin(),
        queueFamilyProperties.end(),
        [queueType]( vk::QueueFamilyProperties const & qfp ) { return qfp.queueFlags & queueType; } );

    assert(graphicsQueueFamilyProperty != queueFamilyProperties.end());
    auto queueFamilyIndex =  static_cast<uint32_t> (std::distance(queueFamilyProperties.begin(), graphicsQueueFamilyProperty));
    Utils::Logger::LogInfoVerboseOnly("Found graphics queue family at index: " + std::to_string(queueFamilyIndex));
    return queueFamilyIndex;
}

vk::ImageView VulkanUtils::GenerateImageView(const vk::Device &logicalDevice, const vk::Image &image,
    uint32_t mipLevels, vk::Format format, vk::ImageAspectFlags aspecFlags) {
    vk::ImageViewCreateInfo createInfo{};
    createInfo.image = image;
    createInfo.format = format;
    createInfo.viewType = vk::ImageViewType::e2D;
    createInfo.subresourceRange.aspectMask = aspecFlags;
    createInfo.subresourceRange.baseMipLevel = 0;
    createInfo.subresourceRange.levelCount = mipLevels;
    createInfo.subresourceRange.baseArrayLayer = 0;
    createInfo.subresourceRange.layerCount = 1;

    vk::ImageView imageView = logicalDevice.createImageView(createInfo);
    assert(imageView != VK_NULL_HANDLE);
    Utils::Logger::LogInfoVerboseOnly("2D Image view created [this message was generated by utility function]");
    return imageView;
}

void VulkanUtils::GetVertexBindingAndAttributeDescription(vk::VertexInputBindingDescription &bindingDescription,
    std::vector<vk::VertexInputAttributeDescription> &attributeDescription) {
    bindingDescription.binding = 0;
    bindingDescription.stride = sizeof(ApplicationCore::Vertex);
    bindingDescription.inputRate = vk::VertexInputRate::eVertex;

    attributeDescription.resize(3);

    // FOR POSITION
    attributeDescription[0].binding = 0;
    attributeDescription[0].location = 0;
    attributeDescription[0].format = vk::Format::eR32G32B32Sfloat;
    attributeDescription[0].offset = offsetof(ApplicationCore::Vertex, position);

    // NORMALS
    attributeDescription[1].binding = 0;
    attributeDescription[1].location = 1;
    attributeDescription[1].format = vk::Format::eR32G32B32Sfloat;
    attributeDescription[1].offset = offsetof(ApplicationCore::Vertex, normal);

    // uv
    attributeDescription[2].binding = 0;
    attributeDescription[2].location = 2;
    attributeDescription[2].format = vk::Format::eR32G32Sfloat;
    attributeDescription[2].offset = offsetof(ApplicationCore::Vertex, uv);
}


